# Generated by dcl-compiler: Version: 0.15.0 (commitId: b21e47829cdc40e3b3f448d712c1da1b409359ad)

package cap

import data.cap.__disp

__pol = x {
  x := input["$dcl"].policies
} else = x {
  dcl_utp  := input["$dcl"].principal2policies
  data_utp := data.principal2policies
  walk(data_utp,[dcl_utp, x])
} else = x {
  dcl_utp  := input["$dcl"].principal2policies
  data_utp := data.principal2policies
  x := []
} else = x {
  not input["$dcl"].principal2policies
  x := []
}

__polFilter = x {
  x := input["$dcl"].scopeFilter
} else = null

__dclerror = x {
  not __pol
  x := {"$dclerror": -102, "message": "Cannot determine assigned policies"} 
}

__callOrDefault(policies) {
    p := __disp.__nameMap[ policies[_] ]
  __disp[ p ]
}
__callOrDefault(_) {
  __disp.__defaultPol
}

__filter( null ) {
    true
}
__filter( filter ) {
    f := __disp.__nameMap[ filter[_] ]
  __disp[ f ]
}

__grant(policies, filter) {
  __filter(filter)
  __callOrDefault(policies)
}

#
# <API>
#
ping := true

allow    { __grant(__pol, __polFilter) }
else = x { x := __dclerror }
else = x { x := false }


allowAction = x {
  not input["$dcl"].resource 
  x := allow
} else = x {
  i := input["$dcl"].resource
  x := {"$dclerror": -103, "message": "resource must not be set for allowAction"} 
}

allowPartial { __grant(__pol, __polFilter) }
#
# </API>
#
